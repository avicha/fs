// Generated by CoffeeScript 1.4.0
(function() {
  var async, fs, path, _;

  fs = require('fs');

  path = require('path');

  _ = require('underscore');

  async = require('async');

  fs.mkdirp = require('mkdirp');

  fs.mkdirpSync = fs.mkdirp.sync;

  fs.ensureDir = function(dir, callback) {
    return fs.exists(dir, function(exists) {
      if (exists) {
        return callback(null);
      } else {
        return fs.mkdirp(dir, callback);
      }
    });
  };

  fs.isSubDir = function(dir1, dir2) {
    var diff, p1, p2;
    p1 = dir1.split(/[\\\/]/);
    p2 = dir2.split(/[\\\/]/);
    diff = _.difference(p2, p1);
    if (!diff.length) {
      return true;
    } else {
      return false;
    }
  };

  fs.getDirFiles = function(dir, callback) {
    var resultFiles;
    resultFiles = [];
    return fs.readdir(dir, function(err, files) {
      if (err) {
        return callback(err, resultFiles);
      } else {
        return async.forEachLimit(files, 10, function(file, cb) {
          file = path.join(dir, file);
          return fs.stat(file, function(err, stat) {
            if (err) {
              return cb(err);
            } else {
              if (stat.isFile()) {
                resultFiles.push(file);
                return cb(null);
              } else {
                return fs.getDirFiles(file, function(err, subFiles) {
                  if (!err && subFiles.length) {
                    resultFiles = resultFiles.concat(subFiles);
                  }
                  return cb(null);
                });
              }
            }
          });
        }, function(err) {
          return callback(err, resultFiles);
        });
      }
    });
  };

  fs.copyFile = function(source, target, callback) {
    return fs.readFile(source, function(err, buffer) {
      if (err) {
        return callback(err);
      } else {
        return fs.ensureDir(path.dirname(target), function(err) {
          if (err) {
            return callback(err);
          } else {
            return fs.writeFile(target, buffer, function(err) {
              if (err) {
                return callback(err);
              } else {
                return callback(null);
              }
            });
          }
        });
      }
    });
  };

  fs.copyDir = function(dir1, dir2, callback) {
    return fs.getDirFiles(dir1, function(err, resultFiles) {
      if (err) {
        return callback(err);
      } else {
        return async.forEachLimit(resultFiles, 10, function(file, cb) {
          var target;
          target = path.join(dir2, path.relative(dir1, file));
          return fs.copyFile(file, target, cb);
        }, function(err) {
          return callback(err);
        });
      }
    });
  };

  module.exports = fs;

}).call(this);
